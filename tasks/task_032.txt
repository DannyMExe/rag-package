# Task ID: 32
# Title: Set up GitHub Packages for Private Distribution
# Status: in-progress
# Dependencies: 31, 25, 3
# Priority: high
# Description: Configure GitHub Packages as a private Python package registry for the lawfirm-rag-package, and update GitHub Actions workflow to publish to GitHub Packages instead of PyPI.
# Details:
1. Configure GitHub Packages for Python package distribution:
   - Update the `pyproject.toml` file to include GitHub Packages repository information and update package name to match GitHub's naming convention:
     ```toml
     [build-system]
     requires = ["setuptools>=42", "wheel"]
     build-backend = "setuptools.build_meta"

     # Update package name from 'rag-package' to 'dannymexe-rag-package'
     # to match GitHub's naming convention
     ```

2. Create or modify the GitHub Actions workflow file (`.github/workflows/publish.yml`):
   ```yaml
   name: Publish Python Package to GitHub Packages

   on:
     release:
       types: [created]
     # Optional: Add manual trigger
     workflow_dispatch:

   jobs:
     deploy:
       runs-on: ubuntu-latest
       environment: release
       permissions:
         packages: write
         contents: read
       steps:
       - uses: actions/checkout@v3
       - name: Set up Python
         uses: actions/setup-python@v4
         with:
           python-version: '3.10'
       - name: Install dependencies
         run: |
           python -m pip install --upgrade pip
           pip install build twine
       - name: Build package
         run: python -m build
       - name: Generate .pypirc file
         run: |
           # Generate .pypirc file for GitHub Packages
           # Configuration for twine to use GitHub repository
       - name: Publish package to GitHub Packages
         run: |
           # Use twine command to publish to GitHub repository
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
   ```

3. Update repository settings:
   - Go to the GitHub repository settings
   - Navigate to "Packages" section
   - Ensure package visibility is set appropriately (private)
   - Configure package access permissions for team members

4. Create documentation for users on how to install the package:
   ```markdown
   ## Installing from GitHub Packages

   To install this package from GitHub Packages, you'll need to:

   1. Create a Personal Access Token with `read:packages` scope
   2. Configure pip to use GitHub Packages:

      ```
      pip config set global.index-url https://USERNAME:TOKEN@maven.pkg.github.com/OWNER/lawfirm-rag-package/simple/
      ```

   3. Install the package:

      ```
      pip install dannymexe-rag-package
      ```
   ```

5. Update the README.md with installation instructions for private package distribution:
   - Include documentation for installing from GitHub Packages
   - Add steps for configuring pip to use GitHub Packages
   - Add instructions for creating a personal access token

6. Test the workflow by creating a GitHub release or using the manual workflow trigger.

Note: Replace "OWNER" with the actual GitHub username or organization name throughout the configuration.

# Test Strategy:
1. Verify GitHub Packages configuration:
   - Check that the `pyproject.toml` file has been correctly updated with GitHub Packages repository information and the package name has been changed to 'dannymexe-rag-package'
   - Ensure the GitHub Actions workflow file is properly configured to publish to GitHub Packages with appropriate permissions and environment settings

2. Test the GitHub Actions workflow:
   - Create a test release tag or use the manual workflow trigger
   - Monitor the GitHub Actions workflow execution
   - Verify that the package is successfully built and published to GitHub Packages
   - Confirm the .pypirc file is correctly generated during the build process

3. Test package installation:
   - Create a new virtual environment
   - Configure pip to use GitHub Packages as described in the documentation
   - Attempt to install the package using pip
   - Verify that the package installs correctly and can be imported
   - Ensure the package can be installed using the new name 'dannymexe-rag-package'

4. Test access controls:
   - Verify that only authorized users can access and install the package
   - Test with a user who doesn't have access to confirm the package is private
   - Test with an authorized user to confirm they can access and install the package

5. Integration testing:
   - Create a simple test project that depends on the package
   - Verify that the package can be installed and used in a real project scenario
   - Test any specific functionality that might be affected by the distribution method

6. Documentation verification:
   - Review the updated README and documentation
   - Ensure the installation instructions are clear and accurate
   - Have a team member follow the instructions to verify they work as expected
   - Confirm the documentation reflects the new package name

# Subtasks:
## 32.1. Test GitHub release workflow [todo]
### Dependencies: None
### Description: Create a GitHub release to test the publishing workflow and verify the package is correctly published to GitHub Packages.
### Details:


## 32.2. Verify package publication [todo]
### Dependencies: None
### Description: Check that the package appears in the GitHub Packages section of the repository after the workflow runs.
### Details:


## 32.3. Test installation from GitHub Packages [todo]
### Dependencies: None
### Description: Create a test environment and verify that the package can be installed using the instructions in the README.
### Details:


## 32.4. Coordinate with task #33 for installation instructions [todo]
### Dependencies: None
### Description: Review task #33 and provide more detailed installation instructions if needed based on testing results.
### Details:


