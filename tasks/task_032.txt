# Task ID: 32
# Title: Set up GitHub Packages for Private Distribution
# Status: done
# Dependencies: 31, 25, 3
# Priority: high
# Description: Configure GitHub Actions workflow to publish the lawfirm-rag-package to PyPI instead of GitHub Packages, and update package configuration for public distribution.
# Details:
1. Configure package for PyPI distribution:
   - Update the `pyproject.toml` file to include PyPI repository information and update package name to match PyPI naming convention:
     ```toml
     [build-system]
     requires = ["setuptools>=42", "wheel"]
     build-backend = "setuptools.build_meta"

     # Update package name to 'lawfirm-rag-package' to match PyPI naming convention
     ```

2. Create or modify the GitHub Actions workflow file (`.github/workflows/publish-to-pypi.yml`):
   ```yaml
   name: Publish Python Package to PyPI

   on:
     release:
       types: [created]
     # Optional: Add manual trigger
     workflow_dispatch:

   jobs:
     deploy:
       runs-on: ubuntu-latest
       environment: release
       permissions:
         id-token: write  # Required for PyPI trusted publishing
         contents: read
       steps:
       - uses: actions/checkout@v3
       - name: Set up Python
         uses: actions/setup-python@v4
         with:
           python-version: '3.10'
       - name: Install dependencies
         run: |
           python -m pip install --upgrade pip
           pip install build
       - name: Build package
         run: python -m build
       - name: Publish package to PyPI
         uses: pypa/gh-action-pypi-publish@release/v1
   ```

3. Set up PyPI account and token:
   - Create a PyPI account if you don't have one
   - Generate a PyPI API token with upload scope specifically for "Upload to project: lawfirm-rag-package"
   - Add the token to GitHub repository secrets as PYPI_API_TOKEN

4. Create documentation for users on how to install the package:
   ```markdown
   ## Installing from PyPI

   To install this package from PyPI, simply run:

   ```
   pip install lawfirm-rag-package
   ```
   ```

5. Update the README.md with installation instructions for public package distribution:
   - Include documentation for installing from PyPI
   - Remove any references to GitHub Packages or private distribution

6. Test the workflow by creating a GitHub release or using the manual workflow trigger.

Note: This approach is preferable as:
- PyPI is the standard Python package registry
- Public packages on PyPI are freely available without authentication
- PyPI has better integration with pip and Python tooling
- PyPI packages are easier to install for end users
- The workflow uses PyPI's trusted publishing mechanism, which is more secure than using API tokens directly in the workflow

# Test Strategy:
1. Verify PyPI configuration:
   - Check that the `pyproject.toml` file has been correctly updated with PyPI repository information and the package name has been changed to 'lawfirm-rag-package'
   - Ensure the GitHub Actions workflow file is properly configured to publish to PyPI with appropriate permissions and environment settings

2. Test the GitHub Actions workflow:
   - Create a test release tag or use the manual workflow trigger
   - Monitor the GitHub Actions workflow execution
   - Verify that the package is successfully built and published to PyPI

3. Test package installation:
   - Create a new virtual environment
   - Attempt to install the package using pip directly from PyPI
   - Verify that the package installs correctly and can be imported
   - Ensure the package can be installed using the name 'lawfirm-rag-package'

4. Test access controls (if needed):
   - If the package should be public, verify that anyone can access and install it
   - If the package should be private, verify that only authorized users can access it

5. Integration testing:
   - Create a simple test project that depends on the package
   - Verify that the package can be installed and used in a real project scenario
   - Test any specific functionality that might be affected by the distribution method

6. Documentation verification:
   - Review the updated README and documentation
   - Ensure the installation instructions are clear and accurate
   - Have a team member follow the instructions to verify they work as expected
   - Confirm the documentation reflects the new package name and PyPI installation method

# Subtasks:
## 32.1. Test GitHub release workflow [done]
### Dependencies: None
### Description: Create a GitHub release to test the publishing workflow and verify the package is correctly published to GitHub Packages.
### Details:


## 32.2. Verify package publication [done]
### Dependencies: None
### Description: Check that the package appears in the GitHub Packages section of the repository after the workflow runs.
### Details:


## 32.3. Test installation from GitHub Packages [done]
### Dependencies: None
### Description: Create a test environment and verify that the package can be installed using the instructions in the README.
### Details:


## 32.4. Coordinate with task #33 for installation instructions [done]
### Dependencies: None
### Description: Review task #33 and provide more detailed installation instructions if needed based on testing results.
### Details:


## 32.5. Create PyPI account and generate API token [done]
### Dependencies: None
### Description: Create a PyPI account if needed and generate a PyPI API token with upload scope for the package.
### Details:


## 32.6. Add PyPI token to GitHub repository secrets [done]
### Dependencies: None
### Description: Add the PyPI API token to GitHub repository secrets as PYPI_API_TOKEN for use in the workflow.
### Details:


## 32.7. Update subtasks 32.1-32.3 for PyPI instead of GitHub Packages [done]
### Dependencies: None
### Description: The original subtasks refer to GitHub Packages, but we're now using PyPI. When executing these tasks, verify publication to PyPI and test installation from PyPI instead.
### Details:


## 33.7. Test GitHub release workflow for PyPI [done]
### Dependencies: None
### Description: Create a GitHub release to test the publishing workflow and verify the package is correctly published to PyPI.
### Details:


## 34.7. Verify package publication on PyPI [done]
### Dependencies: None
### Description: Check that the package appears in the PyPI registry after the workflow runs successfully.
### Details:


## 35.7. Test installation from PyPI [done]
### Dependencies: None
### Description: Create a test environment and verify that the package can be installed from PyPI using the instructions in the README.
### Details:


## 36.7. Update package name in pyproject.toml [done]
### Dependencies: None
### Description: Update the package name in pyproject.toml from 'dannymexe-rag-package' to 'lawfirm-rag-package' for PyPI publishing.
### Details:


## 37.7. Create GitHub Actions workflow for PyPI publishing [done]
### Dependencies: None
### Description: Create a GitHub Actions workflow file for publishing to PyPI using trusted publishing mechanism.
### Details:


## 38.7. Update README with PyPI installation instructions [done]
### Dependencies: None
### Description: Update the README.md file with instructions for installing the package from PyPI.
### Details:


## 32.8. Generate PyPI token with specific project scope [done]
### Dependencies: None
### Description: Generate a PyPI API token with the specific scope "Upload to project: lawfirm-rag-package" as required for the trusted publishing workflow.
### Details:


## 32.9. Create GitHub release to trigger PyPI publication [done]
### Dependencies: None
### Description: Create a GitHub release with an appropriate version tag to trigger the PyPI publishing workflow.
### Details:


## 32.10. Verify trusted publishing configuration [done]
### Dependencies: None
### Description: Ensure the GitHub Actions workflow is correctly configured for PyPI's trusted publishing mechanism, which eliminates the need for API tokens to be passed directly in the workflow.
### Details:


